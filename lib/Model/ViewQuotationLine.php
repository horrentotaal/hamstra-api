<?php
/**
 * ViewQuotationLine
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hamstra API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.31
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ViewQuotationLine Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ViewQuotationLine implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ViewQuotationLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'quotationline_id' => 'int',
        'quantity' => 'double',
        'description' => 'string',
        'line_summary' => 'string',
        'consumer_price' => 'double',
        'sales_price' => 'double',
        'discount' => 'double',
        'line_amount' => 'double',
        'delivery_week' => 'int',
        'product_id' => 'int',
        'customer_description' => 'string',
        'customer_reference' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'quotationline_id' => 'int32',
        'quantity' => 'double',
        'description' => null,
        'line_summary' => null,
        'consumer_price' => 'double',
        'sales_price' => 'double',
        'discount' => 'double',
        'line_amount' => 'double',
        'delivery_week' => 'int32',
        'product_id' => 'int32',
        'customer_description' => null,
        'customer_reference' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'quotationline_id' => 'quotationlineId',
        'quantity' => 'quantity',
        'description' => 'description',
        'line_summary' => 'lineSummary',
        'consumer_price' => 'consumerPrice',
        'sales_price' => 'salesPrice',
        'discount' => 'discount',
        'line_amount' => 'lineAmount',
        'delivery_week' => 'deliveryWeek',
        'product_id' => 'productId',
        'customer_description' => 'customerDescription',
        'customer_reference' => 'customerReference'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'quotationline_id' => 'setQuotationlineId',
        'quantity' => 'setQuantity',
        'description' => 'setDescription',
        'line_summary' => 'setLineSummary',
        'consumer_price' => 'setConsumerPrice',
        'sales_price' => 'setSalesPrice',
        'discount' => 'setDiscount',
        'line_amount' => 'setLineAmount',
        'delivery_week' => 'setDeliveryWeek',
        'product_id' => 'setProductId',
        'customer_description' => 'setCustomerDescription',
        'customer_reference' => 'setCustomerReference'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'quotationline_id' => 'getQuotationlineId',
        'quantity' => 'getQuantity',
        'description' => 'getDescription',
        'line_summary' => 'getLineSummary',
        'consumer_price' => 'getConsumerPrice',
        'sales_price' => 'getSalesPrice',
        'discount' => 'getDiscount',
        'line_amount' => 'getLineAmount',
        'delivery_week' => 'getDeliveryWeek',
        'product_id' => 'getProductId',
        'customer_description' => 'getCustomerDescription',
        'customer_reference' => 'getCustomerReference'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['quotationline_id'] = isset($data['quotationline_id']) ? $data['quotationline_id'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['line_summary'] = isset($data['line_summary']) ? $data['line_summary'] : null;
        $this->container['consumer_price'] = isset($data['consumer_price']) ? $data['consumer_price'] : null;
        $this->container['sales_price'] = isset($data['sales_price']) ? $data['sales_price'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['line_amount'] = isset($data['line_amount']) ? $data['line_amount'] : null;
        $this->container['delivery_week'] = isset($data['delivery_week']) ? $data['delivery_week'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['customer_description'] = isset($data['customer_description']) ? $data['customer_description'] : null;
        $this->container['customer_reference'] = isset($data['customer_reference']) ? $data['customer_reference'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets quotationline_id
     *
     * @return int
     */
    public function getQuotationlineId()
    {
        return $this->container['quotationline_id'];
    }

    /**
     * Sets quotationline_id
     *
     * @param int $quotationline_id quotationline_id
     *
     * @return $this
     */
    public function setQuotationlineId($quotationline_id)
    {
        $this->container['quotationline_id'] = $quotationline_id;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return double
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param double $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets line_summary
     *
     * @return string
     */
    public function getLineSummary()
    {
        return $this->container['line_summary'];
    }

    /**
     * Sets line_summary
     *
     * @param string $line_summary line_summary
     *
     * @return $this
     */
    public function setLineSummary($line_summary)
    {
        $this->container['line_summary'] = $line_summary;

        return $this;
    }

    /**
     * Gets consumer_price
     *
     * @return double
     */
    public function getConsumerPrice()
    {
        return $this->container['consumer_price'];
    }

    /**
     * Sets consumer_price
     *
     * @param double $consumer_price consumer_price
     *
     * @return $this
     */
    public function setConsumerPrice($consumer_price)
    {
        $this->container['consumer_price'] = $consumer_price;

        return $this;
    }

    /**
     * Gets sales_price
     *
     * @return double
     */
    public function getSalesPrice()
    {
        return $this->container['sales_price'];
    }

    /**
     * Sets sales_price
     *
     * @param double $sales_price sales_price
     *
     * @return $this
     */
    public function setSalesPrice($sales_price)
    {
        $this->container['sales_price'] = $sales_price;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return double
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param double $discount discount
     *
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets line_amount
     *
     * @return double
     */
    public function getLineAmount()
    {
        return $this->container['line_amount'];
    }

    /**
     * Sets line_amount
     *
     * @param double $line_amount line_amount
     *
     * @return $this
     */
    public function setLineAmount($line_amount)
    {
        $this->container['line_amount'] = $line_amount;

        return $this;
    }

    /**
     * Gets delivery_week
     *
     * @return int
     */
    public function getDeliveryWeek()
    {
        return $this->container['delivery_week'];
    }

    /**
     * Sets delivery_week
     *
     * @param int $delivery_week delivery_week
     *
     * @return $this
     */
    public function setDeliveryWeek($delivery_week)
    {
        $this->container['delivery_week'] = $delivery_week;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return int
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param int $product_id product_id
     *
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets customer_description
     *
     * @return string
     */
    public function getCustomerDescription()
    {
        return $this->container['customer_description'];
    }

    /**
     * Sets customer_description
     *
     * @param string $customer_description customer_description
     *
     * @return $this
     */
    public function setCustomerDescription($customer_description)
    {
        $this->container['customer_description'] = $customer_description;

        return $this;
    }

    /**
     * Gets customer_reference
     *
     * @return string
     */
    public function getCustomerReference()
    {
        return $this->container['customer_reference'];
    }

    /**
     * Sets customer_reference
     *
     * @param string $customer_reference customer_reference
     *
     * @return $this
     */
    public function setCustomerReference($customer_reference)
    {
        $this->container['customer_reference'] = $customer_reference;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


