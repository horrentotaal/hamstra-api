<?php
/**
 * HamstraAPIModelsProductsProductDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Horrentotaal\Hamstra
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hamstra API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Horrentotaal\Hamstra\Model;

use \ArrayAccess;
use \Horrentotaal\Hamstra\ObjectSerializer;

/**
 * HamstraAPIModelsProductsProductDetail Class Doc Comment
 *
 * @category Class
 * @package  Horrentotaal\Hamstra
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HamstraAPIModelsProductsProductDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Hamstra_API.Models.Products.ProductDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'identifier' => 'string',
        'code' => 'string',
        'name' => 'string',
        'description' => 'string',
        'price' => 'double',
        'has_parts' => 'bool',
        'is_customized_product' => 'bool',
        'measurement_instructions_image' => 'string',
        'measurement_instructions' => 'string',
        'options' => '\Horrentotaal\Hamstra\Model\HamstraAPIModelsProductsProductDetailOption[]',
        'sort_nr' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'identifier' => 'uuid',
        'code' => null,
        'name' => null,
        'description' => null,
        'price' => 'double',
        'has_parts' => null,
        'is_customized_product' => null,
        'measurement_instructions_image' => null,
        'measurement_instructions' => null,
        'options' => null,
        'sort_nr' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'identifier' => 'identifier',
        'code' => 'code',
        'name' => 'name',
        'description' => 'description',
        'price' => 'price',
        'has_parts' => 'hasParts',
        'is_customized_product' => 'isCustomizedProduct',
        'measurement_instructions_image' => 'measurementInstructionsImage',
        'measurement_instructions' => 'measurementInstructions',
        'options' => 'options',
        'sort_nr' => 'sortNr'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'identifier' => 'setIdentifier',
        'code' => 'setCode',
        'name' => 'setName',
        'description' => 'setDescription',
        'price' => 'setPrice',
        'has_parts' => 'setHasParts',
        'is_customized_product' => 'setIsCustomizedProduct',
        'measurement_instructions_image' => 'setMeasurementInstructionsImage',
        'measurement_instructions' => 'setMeasurementInstructions',
        'options' => 'setOptions',
        'sort_nr' => 'setSortNr'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'identifier' => 'getIdentifier',
        'code' => 'getCode',
        'name' => 'getName',
        'description' => 'getDescription',
        'price' => 'getPrice',
        'has_parts' => 'getHasParts',
        'is_customized_product' => 'getIsCustomizedProduct',
        'measurement_instructions_image' => 'getMeasurementInstructionsImage',
        'measurement_instructions' => 'getMeasurementInstructions',
        'options' => 'getOptions',
        'sort_nr' => 'getSortNr'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['identifier'] = isset($data['identifier']) ? $data['identifier'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['has_parts'] = isset($data['has_parts']) ? $data['has_parts'] : null;
        $this->container['is_customized_product'] = isset($data['is_customized_product']) ? $data['is_customized_product'] : null;
        $this->container['measurement_instructions_image'] = isset($data['measurement_instructions_image']) ? $data['measurement_instructions_image'] : null;
        $this->container['measurement_instructions'] = isset($data['measurement_instructions']) ? $data['measurement_instructions'] : null;
        $this->container['options'] = isset($data['options']) ? $data['options'] : null;
        $this->container['sort_nr'] = isset($data['sort_nr']) ? $data['sort_nr'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets identifier
     *
     * @return string
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param string $identifier identifier
     *
     * @return $this
     */
    public function setIdentifier($identifier)
    {
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets price
     *
     * @return double
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param double $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets has_parts
     *
     * @return bool
     */
    public function getHasParts()
    {
        return $this->container['has_parts'];
    }

    /**
     * Sets has_parts
     *
     * @param bool $has_parts has_parts
     *
     * @return $this
     */
    public function setHasParts($has_parts)
    {
        $this->container['has_parts'] = $has_parts;

        return $this;
    }

    /**
     * Gets is_customized_product
     *
     * @return bool
     */
    public function getIsCustomizedProduct()
    {
        return $this->container['is_customized_product'];
    }

    /**
     * Sets is_customized_product
     *
     * @param bool $is_customized_product is_customized_product
     *
     * @return $this
     */
    public function setIsCustomizedProduct($is_customized_product)
    {
        $this->container['is_customized_product'] = $is_customized_product;

        return $this;
    }

    /**
     * Gets measurement_instructions_image
     *
     * @return string
     */
    public function getMeasurementInstructionsImage()
    {
        return $this->container['measurement_instructions_image'];
    }

    /**
     * Sets measurement_instructions_image
     *
     * @param string $measurement_instructions_image measurement_instructions_image
     *
     * @return $this
     */
    public function setMeasurementInstructionsImage($measurement_instructions_image)
    {
        $this->container['measurement_instructions_image'] = $measurement_instructions_image;

        return $this;
    }

    /**
     * Gets measurement_instructions
     *
     * @return string
     */
    public function getMeasurementInstructions()
    {
        return $this->container['measurement_instructions'];
    }

    /**
     * Sets measurement_instructions
     *
     * @param string $measurement_instructions measurement_instructions
     *
     * @return $this
     */
    public function setMeasurementInstructions($measurement_instructions)
    {
        $this->container['measurement_instructions'] = $measurement_instructions;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \Horrentotaal\Hamstra\Model\HamstraAPIModelsProductsProductDetailOption[]
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \Horrentotaal\Hamstra\Model\HamstraAPIModelsProductsProductDetailOption[] $options options
     *
     * @return $this
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets sort_nr
     *
     * @return int
     */
    public function getSortNr()
    {
        return $this->container['sort_nr'];
    }

    /**
     * Sets sort_nr
     *
     * @param int $sort_nr sort_nr
     *
     * @return $this
     */
    public function setSortNr($sort_nr)
    {
        $this->container['sort_nr'] = $sort_nr;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


