<?php
/**
 * ProductApi
 * PHP version 5
 *
 * @category Class
 * @package  Horrentotaal\Hamstra
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hamstra API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Horrentotaal\Hamstra\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Horrentotaal\Hamstra\ApiException;
use Horrentotaal\Hamstra\Configuration;
use Horrentotaal\Hamstra\HeaderSelector;
use Horrentotaal\Hamstra\ObjectSerializer;

/**
 * ProductApi Class Doc Comment
 *
 * @category Class
 * @package  Horrentotaal\Hamstra
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation productGetAvailableProducts
     *
     * Get the available products for the authenticated user
     *
     *
     * @throws \Horrentotaal\Hamstra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Horrentotaal\Hamstra\Model\HamstraAPIModelsProductsProduct[]
     */
    public function productGetAvailableProducts()
    {
        list($response) = $this->productGetAvailableProductsWithHttpInfo();
        return $response;
    }

    /**
     * Operation productGetAvailableProductsWithHttpInfo
     *
     * Get the available products for the authenticated user
     *
     *
     * @throws \Horrentotaal\Hamstra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Horrentotaal\Hamstra\Model\HamstraAPIModelsProductsProduct[], HTTP status code, HTTP response headers (array of strings)
     */
    public function productGetAvailableProductsWithHttpInfo()
    {
        $returnType = '\Horrentotaal\Hamstra\Model\HamstraAPIModelsProductsProduct[]';
        $request = $this->productGetAvailableProductsRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Horrentotaal\Hamstra\Model\HamstraAPIModelsProductsProduct[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productGetAvailableProductsAsync
     *
     * Get the available products for the authenticated user
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetAvailableProductsAsync()
    {
        return $this->productGetAvailableProductsAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productGetAvailableProductsAsyncWithHttpInfo
     *
     * Get the available products for the authenticated user
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetAvailableProductsAsyncWithHttpInfo()
    {
        $returnType = '\Horrentotaal\Hamstra\Model\HamstraAPIModelsProductsProduct[]';
        $request = $this->productGetAvailableProductsRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productGetAvailableProducts'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function productGetAvailableProductsRequest()
    {

        $resourcePath = '/api/product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productGetById
     *
     * Get the details of a given product
     *
     * @param  int $product_id The ID of the product (required)
     * @param  bool $consumer_price Show the consumer price instead of salesprice (optional)
     * @param  bool $include_wizard_items Include wizard only items in the result (optional)
     * @param  bool $full_detail Include product options in the detail (optional)
     *
     * @throws \Horrentotaal\Hamstra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Horrentotaal\Hamstra\Model\HamstraAPIModelsProductsProductDetail
     */
    public function productGetById($product_id, $consumer_price = null, $include_wizard_items = null, $full_detail = null)
    {
        list($response) = $this->productGetByIdWithHttpInfo($product_id, $consumer_price, $include_wizard_items, $full_detail);
        return $response;
    }

    /**
     * Operation productGetByIdWithHttpInfo
     *
     * Get the details of a given product
     *
     * @param  int $product_id The ID of the product (required)
     * @param  bool $consumer_price Show the consumer price instead of salesprice (optional)
     * @param  bool $include_wizard_items Include wizard only items in the result (optional)
     * @param  bool $full_detail Include product options in the detail (optional)
     *
     * @throws \Horrentotaal\Hamstra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Horrentotaal\Hamstra\Model\HamstraAPIModelsProductsProductDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function productGetByIdWithHttpInfo($product_id, $consumer_price = null, $include_wizard_items = null, $full_detail = null)
    {
        $returnType = '\Horrentotaal\Hamstra\Model\HamstraAPIModelsProductsProductDetail';
        $request = $this->productGetByIdRequest($product_id, $consumer_price, $include_wizard_items, $full_detail);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Horrentotaal\Hamstra\Model\HamstraAPIModelsProductsProductDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productGetByIdAsync
     *
     * Get the details of a given product
     *
     * @param  int $product_id The ID of the product (required)
     * @param  bool $consumer_price Show the consumer price instead of salesprice (optional)
     * @param  bool $include_wizard_items Include wizard only items in the result (optional)
     * @param  bool $full_detail Include product options in the detail (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetByIdAsync($product_id, $consumer_price = null, $include_wizard_items = null, $full_detail = null)
    {
        return $this->productGetByIdAsyncWithHttpInfo($product_id, $consumer_price, $include_wizard_items, $full_detail)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productGetByIdAsyncWithHttpInfo
     *
     * Get the details of a given product
     *
     * @param  int $product_id The ID of the product (required)
     * @param  bool $consumer_price Show the consumer price instead of salesprice (optional)
     * @param  bool $include_wizard_items Include wizard only items in the result (optional)
     * @param  bool $full_detail Include product options in the detail (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetByIdAsyncWithHttpInfo($product_id, $consumer_price = null, $include_wizard_items = null, $full_detail = null)
    {
        $returnType = '\Horrentotaal\Hamstra\Model\HamstraAPIModelsProductsProductDetail';
        $request = $this->productGetByIdRequest($product_id, $consumer_price, $include_wizard_items, $full_detail);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productGetById'
     *
     * @param  int $product_id The ID of the product (required)
     * @param  bool $consumer_price Show the consumer price instead of salesprice (optional)
     * @param  bool $include_wizard_items Include wizard only items in the result (optional)
     * @param  bool $full_detail Include product options in the detail (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function productGetByIdRequest($product_id, $consumer_price = null, $include_wizard_items = null, $full_detail = null)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_id when calling productGetById'
            );
        }

        $resourcePath = '/api/product/{productId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($consumer_price !== null) {
            $queryParams['consumerPrice'] = ObjectSerializer::toQueryValue($consumer_price);
        }
        // query params
        if ($include_wizard_items !== null) {
            $queryParams['includeWizardItems'] = ObjectSerializer::toQueryValue($include_wizard_items);
        }
        // query params
        if ($full_detail !== null) {
            $queryParams['fullDetail'] = ObjectSerializer::toQueryValue($full_detail);
        }

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                '{' . 'productId' . '}',
                ObjectSerializer::toPathValue($product_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productGetBySku
     *
     * Get the product by product code
     *
     * @param  string $sku The product code (required)
     *
     * @throws \Horrentotaal\Hamstra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Horrentotaal\Hamstra\Model\HamstraAPIModelsProductsProductDetail
     */
    public function productGetBySku($sku)
    {
        list($response) = $this->productGetBySkuWithHttpInfo($sku);
        return $response;
    }

    /**
     * Operation productGetBySkuWithHttpInfo
     *
     * Get the product by product code
     *
     * @param  string $sku The product code (required)
     *
     * @throws \Horrentotaal\Hamstra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Horrentotaal\Hamstra\Model\HamstraAPIModelsProductsProductDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function productGetBySkuWithHttpInfo($sku)
    {
        $returnType = '\Horrentotaal\Hamstra\Model\HamstraAPIModelsProductsProductDetail';
        $request = $this->productGetBySkuRequest($sku);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Horrentotaal\Hamstra\Model\HamstraAPIModelsProductsProductDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productGetBySkuAsync
     *
     * Get the product by product code
     *
     * @param  string $sku The product code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetBySkuAsync($sku)
    {
        return $this->productGetBySkuAsyncWithHttpInfo($sku)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productGetBySkuAsyncWithHttpInfo
     *
     * Get the product by product code
     *
     * @param  string $sku The product code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetBySkuAsyncWithHttpInfo($sku)
    {
        $returnType = '\Horrentotaal\Hamstra\Model\HamstraAPIModelsProductsProductDetail';
        $request = $this->productGetBySkuRequest($sku);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productGetBySku'
     *
     * @param  string $sku The product code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function productGetBySkuRequest($sku)
    {
        // verify the required parameter 'sku' is set
        if ($sku === null || (is_array($sku) && count($sku) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sku when calling productGetBySku'
            );
        }

        $resourcePath = '/api/product/sku/{sku}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($sku !== null) {
            $resourcePath = str_replace(
                '{' . 'sku' . '}',
                ObjectSerializer::toPathValue($sku),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productGetConfigurationAsync
     *
     * @param  int $product_id product_id (required)
     * @param  bool $include_wizard_items include_wizard_items (optional)
     * @param  bool $current_config_consumer_price current_config_consumer_price (optional)
     * @param  bool $current_config_without_discount current_config_without_discount (optional)
     * @param  object[] $current_config_options current_config_options (optional)
     *
     * @throws \Horrentotaal\Hamstra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Horrentotaal\Hamstra\Model\HamstraAPIModelsProductsProductConfig
     */
    public function productGetConfigurationAsync($product_id, $include_wizard_items = null, $current_config_consumer_price = null, $current_config_without_discount = null, $current_config_options = null)
    {
        list($response) = $this->productGetConfigurationAsyncWithHttpInfo($product_id, $include_wizard_items, $current_config_consumer_price, $current_config_without_discount, $current_config_options);
        return $response;
    }

    /**
     * Operation productGetConfigurationAsyncWithHttpInfo
     *
     * @param  int $product_id (required)
     * @param  bool $include_wizard_items (optional)
     * @param  bool $current_config_consumer_price (optional)
     * @param  bool $current_config_without_discount (optional)
     * @param  object[] $current_config_options (optional)
     *
     * @throws \Horrentotaal\Hamstra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Horrentotaal\Hamstra\Model\HamstraAPIModelsProductsProductConfig, HTTP status code, HTTP response headers (array of strings)
     */
    public function productGetConfigurationAsyncWithHttpInfo($product_id, $include_wizard_items = null, $current_config_consumer_price = null, $current_config_without_discount = null, $current_config_options = null)
    {
        $returnType = '\Horrentotaal\Hamstra\Model\HamstraAPIModelsProductsProductConfig';
        $request = $this->productGetConfigurationAsyncRequest($product_id, $include_wizard_items, $current_config_consumer_price, $current_config_without_discount, $current_config_options);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Horrentotaal\Hamstra\Model\HamstraAPIModelsProductsProductConfig',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productGetConfigurationAsyncAsync
     *
     * 
     *
     * @param  int $product_id (required)
     * @param  bool $include_wizard_items (optional)
     * @param  bool $current_config_consumer_price (optional)
     * @param  bool $current_config_without_discount (optional)
     * @param  object[] $current_config_options (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetConfigurationAsyncAsync($product_id, $include_wizard_items = null, $current_config_consumer_price = null, $current_config_without_discount = null, $current_config_options = null)
    {
        return $this->productGetConfigurationAsyncAsyncWithHttpInfo($product_id, $include_wizard_items, $current_config_consumer_price, $current_config_without_discount, $current_config_options)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productGetConfigurationAsyncAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $product_id (required)
     * @param  bool $include_wizard_items (optional)
     * @param  bool $current_config_consumer_price (optional)
     * @param  bool $current_config_without_discount (optional)
     * @param  object[] $current_config_options (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetConfigurationAsyncAsyncWithHttpInfo($product_id, $include_wizard_items = null, $current_config_consumer_price = null, $current_config_without_discount = null, $current_config_options = null)
    {
        $returnType = '\Horrentotaal\Hamstra\Model\HamstraAPIModelsProductsProductConfig';
        $request = $this->productGetConfigurationAsyncRequest($product_id, $include_wizard_items, $current_config_consumer_price, $current_config_without_discount, $current_config_options);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productGetConfigurationAsync'
     *
     * @param  int $product_id (required)
     * @param  bool $include_wizard_items (optional)
     * @param  bool $current_config_consumer_price (optional)
     * @param  bool $current_config_without_discount (optional)
     * @param  object[] $current_config_options (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function productGetConfigurationAsyncRequest($product_id, $include_wizard_items = null, $current_config_consumer_price = null, $current_config_without_discount = null, $current_config_options = null)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_id when calling productGetConfigurationAsync'
            );
        }

        $resourcePath = '/api/product/{productId}/configuration';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include_wizard_items !== null) {
            $queryParams['includeWizardItems'] = ObjectSerializer::toQueryValue($include_wizard_items);
        }
        // query params
        if ($current_config_consumer_price !== null) {
            $queryParams['currentConfig.consumerPrice'] = ObjectSerializer::toQueryValue($current_config_consumer_price);
        }
        // query params
        if ($current_config_without_discount !== null) {
            $queryParams['currentConfig.withoutDiscount'] = ObjectSerializer::toQueryValue($current_config_without_discount);
        }
        // query params
        if (is_array($current_config_options)) {
            $queryParams['currentConfig.options'] = $current_config_options;
        } else
        if ($current_config_options !== null) {
            $queryParams['currentConfig.options'] = ObjectSerializer::toQueryValue($current_config_options);
        }

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                '{' . 'productId' . '}',
                ObjectSerializer::toPathValue($product_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productGetConfigurationAsync_0
     *
     * @param  int $product_id product_id (required)
     * @param  \Horrentotaal\Hamstra\Model\HamstraAPIModelsProductsProductConfigRequest $current_config current_config (required)
     * @param  bool $include_wizard_items include_wizard_items (optional)
     *
     * @throws \Horrentotaal\Hamstra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Horrentotaal\Hamstra\Model\HamstraAPIModelsProductsProductConfig
     */
    public function productGetConfigurationAsync_0($product_id, $current_config, $include_wizard_items = null)
    {
        list($response) = $this->productGetConfigurationAsync_0WithHttpInfo($product_id, $current_config, $include_wizard_items);
        return $response;
    }

    /**
     * Operation productGetConfigurationAsync_0WithHttpInfo
     *
     * @param  int $product_id (required)
     * @param  \Horrentotaal\Hamstra\Model\HamstraAPIModelsProductsProductConfigRequest $current_config (required)
     * @param  bool $include_wizard_items (optional)
     *
     * @throws \Horrentotaal\Hamstra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Horrentotaal\Hamstra\Model\HamstraAPIModelsProductsProductConfig, HTTP status code, HTTP response headers (array of strings)
     */
    public function productGetConfigurationAsync_0WithHttpInfo($product_id, $current_config, $include_wizard_items = null)
    {
        $returnType = '\Horrentotaal\Hamstra\Model\HamstraAPIModelsProductsProductConfig';
        $request = $this->productGetConfigurationAsync_0Request($product_id, $current_config, $include_wizard_items);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Horrentotaal\Hamstra\Model\HamstraAPIModelsProductsProductConfig',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productGetConfigurationAsync_0Async
     *
     * 
     *
     * @param  int $product_id (required)
     * @param  \Horrentotaal\Hamstra\Model\HamstraAPIModelsProductsProductConfigRequest $current_config (required)
     * @param  bool $include_wizard_items (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetConfigurationAsync_0Async($product_id, $current_config, $include_wizard_items = null)
    {
        return $this->productGetConfigurationAsync_0AsyncWithHttpInfo($product_id, $current_config, $include_wizard_items)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productGetConfigurationAsync_0AsyncWithHttpInfo
     *
     * 
     *
     * @param  int $product_id (required)
     * @param  \Horrentotaal\Hamstra\Model\HamstraAPIModelsProductsProductConfigRequest $current_config (required)
     * @param  bool $include_wizard_items (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetConfigurationAsync_0AsyncWithHttpInfo($product_id, $current_config, $include_wizard_items = null)
    {
        $returnType = '\Horrentotaal\Hamstra\Model\HamstraAPIModelsProductsProductConfig';
        $request = $this->productGetConfigurationAsync_0Request($product_id, $current_config, $include_wizard_items);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productGetConfigurationAsync_0'
     *
     * @param  int $product_id (required)
     * @param  \Horrentotaal\Hamstra\Model\HamstraAPIModelsProductsProductConfigRequest $current_config (required)
     * @param  bool $include_wizard_items (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function productGetConfigurationAsync_0Request($product_id, $current_config, $include_wizard_items = null)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_id when calling productGetConfigurationAsync_0'
            );
        }
        // verify the required parameter 'current_config' is set
        if ($current_config === null || (is_array($current_config) && count($current_config) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $current_config when calling productGetConfigurationAsync_0'
            );
        }

        $resourcePath = '/api/product/{productId}/configuration';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include_wizard_items !== null) {
            $queryParams['includeWizardItems'] = ObjectSerializer::toQueryValue($include_wizard_items);
        }

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                '{' . 'productId' . '}',
                ObjectSerializer::toPathValue($product_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($current_config)) {
            $_tempBody = $current_config;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productGetValidationMessagesAsync
     *
     * Get the product option validation messages
     *
     *
     * @throws \Horrentotaal\Hamstra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Horrentotaal\Hamstra\Model\HamstraAPIDTOValidationMessageDTO[]
     */
    public function productGetValidationMessagesAsync()
    {
        list($response) = $this->productGetValidationMessagesAsyncWithHttpInfo();
        return $response;
    }

    /**
     * Operation productGetValidationMessagesAsyncWithHttpInfo
     *
     * Get the product option validation messages
     *
     *
     * @throws \Horrentotaal\Hamstra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Horrentotaal\Hamstra\Model\HamstraAPIDTOValidationMessageDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function productGetValidationMessagesAsyncWithHttpInfo()
    {
        $returnType = '\Horrentotaal\Hamstra\Model\HamstraAPIDTOValidationMessageDTO[]';
        $request = $this->productGetValidationMessagesAsyncRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Horrentotaal\Hamstra\Model\HamstraAPIDTOValidationMessageDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productGetValidationMessagesAsyncAsync
     *
     * Get the product option validation messages
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetValidationMessagesAsyncAsync()
    {
        return $this->productGetValidationMessagesAsyncAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productGetValidationMessagesAsyncAsyncWithHttpInfo
     *
     * Get the product option validation messages
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetValidationMessagesAsyncAsyncWithHttpInfo()
    {
        $returnType = '\Horrentotaal\Hamstra\Model\HamstraAPIDTOValidationMessageDTO[]';
        $request = $this->productGetValidationMessagesAsyncRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productGetValidationMessagesAsync'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function productGetValidationMessagesAsyncRequest()
    {

        $resourcePath = '/api/product/validationMessages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
